# -*- coding: utf-8 -*-
"""Face_Image_Recognition

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k_YE98B5e1qFSJ2d_W_Hf2y6zVgeK4ki
"""

import zipfile
zip_ref = zipfile.ZipFile('/content/Image_Recognition.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

!pip install face_recognition
!pip install opencv-python
import cv2
import os
import face_recognition
from google.colab.patches import cv2_imshow
from google.colab import files

def resize_image(image, target_height):
    """Resize an image to a target height while maintaining aspect ratio."""
    h, w = image.shape[:2]
    aspect_ratio = w / h
    target_width = int(target_height * aspect_ratio)
    return cv2.resize(image, (target_width, target_height))

# Function to load all images from a folder and create face encodings
def load_face_encodings(folder_path):
    encodings = []
    names = []
    for filename in os.listdir(folder_path):
        if filename.lower().endswith(('.jpg', '.jpeg')):
            image_path = os.path.join(folder_path, filename)
            img = cv2.imread(image_path)
            rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            face_encodings = face_recognition.face_encodings(rgb_img)
            if face_encodings:
                encodings.append(face_encodings[0])
                names.append(filename.split('.')[0])
    return encodings, names

# Path to the folder containing celebrity images
folder_path = "/content/Image_Recognition"  # Update to your folder path
encodings, names = load_face_encodings(folder_path)

# Main loop for user to upload images and compare
while True:
    # Upload an image for comparison
    print("Please upload an image for comparison (or type 'exit' to quit):")
    uploaded = files.upload()
    uploaded_image_name = list(uploaded.keys())[0]

    # Exit condition
    if uploaded_image_name.lower() == 'exit':
        print("Exiting the program.")
        break

    img_to_compare = cv2.imread(uploaded_image_name)
    rgb_img_to_compare = cv2.cvtColor(img_to_compare, cv2.COLOR_BGR2RGB)
    img_to_compare_encoding = face_recognition.face_encodings(rgb_img_to_compare)

    # Initialize match variables
    match_found = False
    matched_image = None
    matched_name = "Unknown"

    if img_to_compare_encoding:
        for encoding, name in zip(encodings, names):
            if face_recognition.compare_faces([encoding], img_to_compare_encoding[0])[0]:
                match_found = True
                matched_name = name
                matched_image = cv2.imread(os.path.join(folder_path, name + ".jpg"))
                break

    # Draw rectangle and label on the uploaded image
    face_locations = face_recognition.face_locations(rgb_img_to_compare)
    for (top, right, bottom, left) in face_locations:
        color = (0, 255, 0) if match_found else (0, 0, 255)
        cv2.rectangle(img_to_compare, (left, top), (right, bottom), color, 2)
        cv2.putText(img_to_compare, matched_name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)

    # Ensure matched image is resized and has the same number of channels
    if match_found and matched_image is not None:
        target_height = img_to_compare.shape[0]
        matched_image = resize_image(matched_image, target_height)

        # Concatenate the images side by side
        combined_image = cv2.hconcat([img_to_compare, matched_image])
    else:
        combined_image = img_to_compare  # Only show the uploaded image if no match is found

    # Add a message on top of the image
    message = f"Match Found: {matched_name}" if match_found else "No Match Found"
    print(message)
    font_scale = 1.0
    thickness = 2
    text_size = cv2.getTextSize(message, cv2.FONT_HERSHEY_SIMPLEX, font_scale, thickness)[0]
    text_x = (combined_image.shape[1] - text_size[0]) // 2
    text_y = text_size[1] + 20
    cv2.putText(combined_image, message, (text_x, text_y), cv2.FONT_HERSHEY_SIMPLEX, font_scale, (0, 255, 0), thickness)

    # Display the side-by-side comparison with the message
    cv2_imshow(combined_image)

    print("\nUpload another image or type 'exit' in the upload prompt to quit.")